import asyncio
import json
import re

import vk_api
from vk_api.longpoll import VkLongPoll

from main.additions import friends_lp, online, profile
from tools.messages import messages


finished = True


async def info(delay, peer_id, command):
    global onl
    await asyncio.sleep(delay)
    if "!–Ω –∏–Ω—Ñ–∞" in command or "!–Ω –∏–Ω—Ñ–æ" in command:
        if peer_id > 2000000000:
            history = vk.method('messages.getConversationsById', {'peer_ids': peer_id})
            name = history['items'][0]['chat_settings']['title']
        else:
            user = vk.method('users.get', {'user_ids': peer_id, 'fields': 'friend_status'})
            fname = user[0]['first_name']
            lname = user[0]['last_name']
            name = str(fname)+" "+str(lname)

        historys = vk.method('messages.getHistory', {'count': 1, 'peer_id': peer_id, 'rev': 0})
        count = historys['count']

        with open("main/database/database_lp_temp.json", "r", encoding="utf-8") as file:
               data = json.loads(file.read())
        data_temp = data['templates']
        itr = 0
        for temp in data_temp:
            itr += 1

        with open("main/database/database_lp_dtemp.json", "r", encoding="utf-8") as file:
               data = json.loads(file.read())
        data_temp = data['templates']

        ditr = 0
        for temp in data_temp:
            ditr += 1

        onlines = online.online_info()

        if onlines:
            onl = "‚ùå"
        elif not onlines:
            onl = "‚úÖ"

        read_info = finished

        if read_info:
            read = "‚ùå"
        elif not read_info:
            read = "‚úÖ"

        autofr = friends_lp.auto_add_friends_info()

        autodrs = profile.info_autodr()
        if not autodrs:
            drs = "‚ùå"
        elif onlines:
            drs = "‚úÖ"

        autostatus = profile.info_autostatus()
        if autostatus:
            stats = "‚ùå"
        elif not autostatus:
            stats = "‚úÖ"

        msg_1 = f"""
        –õ–æ–Ω–≥–ø—É–ª–ª –∫–∞–∫–æ–≥–æ-—Ç–æ —É–µ–±–∞–Ω–∞)

        üíª–î–µ–∂—É—Ä–Ω—ã–π: 

        –û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–∫–µ–Ω: ‚úÖ
        –í–µ—á–Ω—ã–π –æ–Ω–ª–∞–π–Ω: {onl}
        –ê–≤—Ç–æ–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –¥—Ä—É–∑—å—è: {autofr}
        –ê–≤—Ç–æ—á–∏—Ç–∞–ª–∫–∞ —Å–ø–µ—Ü. —á–∞—Ç–æ–≤: {read}
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–º–µ–Ω–∞ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è: {drs}
        –ê–≤—Ç–æ—Å—Ç–∞—Ç–∞: {stats}
        –ö–æ–ª-–≤–æ —à–∞–±–æ–≤: {itr}
        –ö–æ–ª-–≤–æ –¥—à–∞–±–æ–≤: {ditr}
        
        üìã–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:
        
        –ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞: \n{name}
        ID —á–∞—Ç–∞: {peer_id}
        –ö–æ–ª-–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {count}
        """.replace('    ', '')

        messages.write_msg(peer_id, msg_1)

async def info_user(delay, peer_id, command):
    await asyncio.sleep(delay)
    if "!–Ω –∫—Ç–æ —Ç—ã" in command:
        history = vk.method('messages.getHistory', {'count': 1, 'peer_id': peer_id, 'rev': 0})
        msg_id = history['items'][0]['conversation_message_id']
        msg_text = history['items'][0]['text']
        msg_text = msg_text.replace('—Ç—ã', '')

        regexp = r"(^[\S]+)|([\S]+)|(\n[\s\S \n]+)"
        _args = re.findall(regexp, msg_text)
        args = []
        payload = ""

        for arg in _args:
            if arg[1] != '':
                args.append(arg[1])
            if arg[2] != '':
                payload = arg[2][1:]

        if len(args) == 1:
            commands = args[0].lower()
            argss = None

            history = vk.method('messages.getHistory', {'count': 1, 'peer_id': peer_id, 'rev': 0})
            user_id = history['items'][0]['reply_message']['from_id']
            print(user_id)
            user = vk.method('users.get', {'user_ids': user_id, 'fields': 'friend_status, city, sex'})
            name = user[0]['first_name']
            friend = user[0]['friend_status']
            sex = user[0]['sex']
            friends = int(friend)
            sexs = int(sex)
            user_ids = "id"+str(user_id)

        else:
            commands = args[0].lower()
            argss = args[1:]

            user_id = ''.join(argss).replace('https://vk.com/', '')
            print(user_id)
            user = vk.method('users.get', {'user_ids': user_id, 'fields': 'friend_status, city, sex'})
            user_id = user[0]['id']
            name = user[0]['first_name']
            friend = user[0]['friend_status']
            sex = user[0]['sex']
            friends = int(friend)
            sexs = int(sex)
            user_ids = "id"+str(user_id)

        friend_status = '–Ω–µ—Ç' if friends == 0 else '–∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞' if friends == 1 else '–∏–º–µ–µ—Ç—Å—è –≤—Ö–æ–¥—è—â–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' if friends == 2 else '–¥–∞'
        sex_status = '–º—É–∂—Å–∫–æ–π' if sexs == 2 else '–∂–µ–Ω—Å–∫–∏–π'

        msg_1 = f"""
        –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:
        –ò–º—è: {name}
        ID: @{user_ids}({user_id})
        –ü–æ–ª: {sex_status}
        –ï—Å—Ç—å –≤ –¥—Ä—É–∑—å—è—Ö: {friend_status}
        """.replace('    ', '')

        messages.write_msg(peer_id, msg_1)

async def info_msg(delay, peer_id, command):
    await asyncio.sleep(delay)
    if "!–Ω –¥–µ–±–∞–≥" in command:
        history = vk.method('messages.getHistory', {'count': 1, 'peer_id': peer_id, 'rev': 0})
        msg_id = history['items'][0]['reply_message']['id']
        info = vk.method('messages.getById', {'message_ids': msg_id})
        messages.write_msg(peer_id, f"{info}")

async def bind(delay, peer_id, command):
    await asyncio.sleep(delay)
    if "!–Ω —Å–≤—è–∑–∞—Ç—å" in command:
        history = vk.method('messages.getHistory', {'count': 1, 'peer_id': peer_id, 'rev': 0})
        user_id = history['items'][0]['from_id']
        user = vk.method('users.get', {'user_ids': user_id, 'fields': 'friend_status, city, sex'})
        sex = user[0]['sex']
        sex_status = '–¥—É—Ä–∞–∫' if sex == 2 else '–¥—É—Ä–∞'

        msg_1 = f"""
        –¢—ã —à–æ {sex_status}?
        –ë–µ—Å–µ–¥–∞ –Ω–µ —Å–≤—è–∑–∞–Ω–∞, —ç—Ç–æ —Ç–µ–±–µ –Ω–µ –¥–µ–∂—É—Ä–Ω—ã–π –∏—Ä–∏—Å, —Å–≤—è–∑–∞–≤–∞—Ç—å –Ω–µ—á–µ–≥–æ
        """.replace('    ', '')

        messages.write_msg(peer_id, msg_1)
    elif "!–≥–µ–π —Å–≤—è–∑–∞—Ç—å" in command:

        msg_1 = f"""
        ‚úÖ –ì–µ–π –∫–ª—É–± —Å–≤—è–∑–∞–Ω —Å –±–µ—Å–µ–¥–æ–π!
        """.replace('    ', '')

        messages.write_msg(peer_id, msg_1)

async def idm(delay, peer_id, command):
    await asyncio.sleep(delay)
    if "!–Ω –∏–¥–º" in command:
        history = vk.method('messages.getHistory', {'count': 1, 'peer_id': peer_id, 'rev': 0})
        msg_id = history['items'][0]['id']

        msg_1 = f"""
        +api MAVKantispam https://lordral.ru/callback/
        """.replace('    ', '')

        messages.write_msg(-174105461, msg_1)

        messages.edit_msg(peer_id, "–ü–µ—Ä–µ–∫–ª—é—á—ë–Ω –Ω–∞ –ø–ª–∞—Ç–Ω—ã–π IDM", msg_id)
    elif "!–Ω –º–æ–π –∏–¥–º" in command:
        history = vk.method('messages.getHistory', {'count': 1, 'peer_id': peer_id, 'rev': 0})
        msg_id = history['items'][0]['id']

        msg_1 = f"""
        +api mavkantispam https://NikitolIrisDev.pythonanywhere.com/callback
        """.replace('    ', '')

        messages.write_msg(-174105461, msg_1)

        messages.edit_msg(peer_id, "–ü–µ—Ä–µ–∫–ª—é—á—ë–Ω –Ω–∞ –º–æ–π IDM", msg_id)
    elif "!–Ω –º–¥–∏" in command:
        history = vk.method('messages.getHistory', {'count': 1, 'peer_id': peer_id, 'rev': 0})
        msg_id = history['items'][0]['id']

        msg_1 = f"""
        +api mavkantispam https://belikanov.online/iris/callback.php
        """.replace('    ', '')

        messages.write_msg(-174105461, msg_1)

        messages.edit_msg(peer_id, "–ü–µ—Ä–µ–∫–ª—é—á—ë–Ω –Ω–∞ MDI", msg_id)


async def chats(delay, peer_id, command):
    await asyncio.sleep(delay)
    if "!–Ω +—á–∞—Ç" in command:
        with open("main/database/database_lp.json", "r", encoding="utf-8") as file:
               data = json.loads(file.read())
        data_chats = data['chats']
        print(data_chats)
        data_chats.append(str(peer_id))
        print(data_chats)
        data = {"chats": data_chats}
        print(data)
        with open("main/database/database_lp.json", "w", encoding="utf-8") as file:
            file.write(json.dumps(data, ensure_ascii=False, indent=4))
        messages.write_msg(peer_id, "–ß–∞—Ç –ø—Ä–∏–≤—è–∑–∞–Ω!")

async def read_on(delay, peer_id, command):
    await asyncio.sleep(delay)
    global finished
    if command == "!–Ω —Å—Ç—á":
        finished = False

async def read(delay, peer_id, command):
    await asyncio.sleep(delay)
    global finished
    if command == "!–Ω —Å—Ç—á":
        messages.write_msg(peer_id, "‚úÖ –ê–≤—Ç–æ—á–∏—Ç–∞–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —á–∞—Ç–∞—Ö –≤–∫–ª—é—á–µ–Ω–∞!")
        with open("main/database/database_lp.json", "r", encoding="utf-8") as file:
                   data = json.loads(file.read())
        data_chats = data['chats']
        while finished == False:
            for i in range(len(data_chats)):
                print(vk.method("messages.markAsRead", {'peer_id': data_chats[i]}))

async def read_off(delay, peer_id, command):
    await asyncio.sleep(delay)
    global finished
    if command == "!–Ω —Å–ø—á":
        messages.write_msg(peer_id, "‚úÖ –ê–≤—Ç–æ—á–∏—Ç–∞–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —á–∞—Ç–∞—Ö –≤—ã–∫–ª—é—á–µ–Ω–∞!")
        finished = True


async def chats_del(delay, peer_id, command):
    await asyncio.sleep(delay)
    if "!–Ω -—á–∞—Ç" in command:
        with open("main/database/database_lp.json", "r", encoding="utf-8") as file:
               data = json.loads(file.read())
        data_chats = data['chats']
        print(data_chats)
        data_chats.remove(str(peer_id))
        print(data_chats)
        data = {"chats": data_chats}
        print(data)
        with open("main/database/database_lp.json", "w", encoding="utf-8") as file:
            file.write(json.dumps(data, ensure_ascii=False, indent=4))
        messages.write_msg(peer_id, "–ß–∞—Ç –æ—Ç–≤—è–∑–∞–Ω!")

async def chats_name(delay, peer_id, command):
    await asyncio.sleep(delay)
    if "!–Ω —á–∑" in command:
        chat_id = peer_id - 2000000000
        history = vk.method('messages.getHistory', {'count': 1, 'peer_id': peer_id, 'rev': 0})
        msg_id = history['items'][0]['conversation_message_id']
        msg_text = history['items'][0]['text']
        chat = vk.method('messages.getChat', {'chat_id': chat_id})
        chat_name = chat['title']
        regexp = r"(^[\S]+)|([\S]+)|(\n[\s\S \n]+)"
        _args = re.findall(regexp, msg_text)
        args = []
        payload = ""

        for arg in _args:
            if arg[1] != '':
                args.append(arg[1])
            if arg[2] != '':
                payload = arg[2][1:]

        if len(args) == 1:
            commands = args[0].lower()
            argss = None

            messages.write_msg(peer_id, "–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–µ—Å–µ–¥—ã!")
        else:
            commands = args[0].lower()
            argss = args[1:]

            name = ''.join(argss)

            i = 1
            while i >= 0:
                history = vk.method('messages.getHistory', {'count': 1, 'peer_id': peer_id, 'rev': 0})
                msg_text = history['items'][0]['text']
                chat = vk.method('messages.getChat', {'chat_id': chat_id})
                chat_name = chat['title']
                if chat_name == name:
                    print('ok')
                if "!–Ω —Å—á–∑" in msg_text:
                    i = -1
                    print("–ê–≤—Ç–æ–∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –±–µ—Å–µ–¥—ã –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ")
                if chat_name != name:
                    vk.method('messages.editChat', {'chat_id': chat_id, 'title': name})
                    print("–ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ")

async def execute(delay, peer_id, command):
    await asyncio.sleep(delay)
    if "!–Ω –∞–ø–∏" in command:
        history = vk.method('messages.getHistory', {'count': 1, 'peer_id': peer_id, 'rev': 0})
        msg_id = history['items'][0]['conversation_message_id']
        msg_text = history['items'][0]['text']
        regexp = r"(^[\S]+)|([\S]+)|(\n[\s\S \n]+)"
        _args = re.findall(regexp, msg_text)
        args = []
        payload = ""

        for arg in _args:
            if arg[1] != '':
                args.append(arg[1])
            if arg[2] != '':
                payload = arg[2][1:]

        if len(args) == 1:
            commands = args[0].lower()
            argss = None

            print(payload)
            test = str(eval(payload))
            messages.write_msg(peer_id, test)
        else:
            commands = args[0].lower()
            argss = args[1:]

            print(payload)
            test = str(eval(payload))
            messages.write_msg(peer_id, "–û—Ç–≤–µ—Ç –≤–∫: " + str(test))


        '''
        count = int(count)
        msg_1 = ''.join(payload)
        '''

with open("main/database/database_token.json", "r", encoding="utf-8") as file:
   data = json.loads(file.read())
token = data['token']

# –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –∫–∞–∫ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ
vk = vk_api.VkApi(app_id=6146827, token=token)

# –†–∞–±–æ—Ç–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
longpoll = VkLongPoll(vk, wait = 0)
